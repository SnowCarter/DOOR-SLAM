function send_start_optimization_flag() {
    neighbors_in_communication_range = neighbors.filter(
      function(rid, data) { 
        return data.distance < (100 * SEPARATOR_RANGE) # ARGoS simulation is in centimeters
      }
    )
    if (neighbors_in_communication_range.count() == 0) {
      has_neighbors = 0
      number_of_steps_with_neighbors = 0
    } else if (not has_neighbors and neighbors_in_communication_range.count() > 0) {
      has_neighbors = 1
    } else if (has_neighbors) {
      number_of_steps_with_neighbors = number_of_steps_with_neighbors + 1

      is_same_neighbor = 0
      neighbors_in_communication_range.foreach( function(neighbor_in_range_id, neighbor_in_range_data) {
        if (last_optimization_neighbor == neighbor_in_range_id) {
            is_same_neighbor = 1
        }
      }
      )
      if (number_of_steps_with_neighbors > OPTIMIZER_NEIGHBOR_PROXIMITY_PERIOD and
         (NUMBER_OF_ROBOTS == 2 or (not is_same_neighbor)) and neighbors_in_communication_range.count() == 1
         ) {
        update_adjacency_vector()
        neighbors.broadcast("start_optimization", adjacency_vector)
        update_has_sent_start_optimization_flag()
      }
    }
}